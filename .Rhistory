lines(d1, col="red")
lines(d2,col="green")
lines(d3,col="blue")
x1<-rnorm(10,1,1)
x2<-rnorm(20,1,1)
x3<-rnorm(30,1,1)
d1<- density(x1)
d2<-density(x2)
d3<-density(x3)
plot(range(d1$x, d2$x,d3$x), range(d1$y, d2$y, d3$y),type="n",xlab="x",ylab="Density")
lines(d1, col="red")
lines(d2,col="green")
lines(d3,col="blue")
x1<-rnorm(10,1,1)
x2<-rnorm(20,1,1)
x3<-rnorm(30,1,1)
d1<- density(x1)
d2<-density(x2)
d3<-density(x3)
#plot(range(d1$x, d2$x,d3$x), range(d1$y, d2$y, d3$y),type="n",xlab="x",ylab="Density")
plot(range(x1, x2,x3), range(d1, d2, d3),type="n",xlab="x",ylab="Density")
lines(d1, col="red")
lines(d2,col="green")
lines(d3,col="blue")
x1<-rnorm(10,1,1)
x2<-rnorm(20,1,1)
x3<-rnorm(30,1,1)
d1<- density(x1)
d2<-density(x2)
d3<-density(x3)
plot(range(d1$x, d2$x,d3$x), range(d1$y, d2$y, d3$y),type="n",xlab="x",ylab="Density")
#plot(range(x1, x2,x3), range(d1, d2, d3),type="n",xlab="x",ylab="Density")
lines(d1, col="red")
lines(d2,col="green")
lines(d3,col="blue")
?matrix
d<-matrix(rnorm(1000*10),1000)
dim(d)
?dim
x<-apply(d,1,mean)
length(x)
sd(x)
1.sqrt(10)
1/sqrt(10)
1/sqrt(1000)
x<-apply(d,2,mean)
length(x)
sd(x)
1/sqrt(1000)
?runif
runif(10)
sd(apply(runif(100,10),100),1,mean)
sd(apply(runif(100*10,100),1,mean))
sd(apply(matrix(runif(100*10),100),1,mean))
1/sqrt(12*10)
sd(apply(matrix(runif(1000*10),100),1,mean))
sd(apply(matrix(runif(1000*10),1000),1,mean))
library(ggplot2)
library(UsingR);data(father.son);
x<-father.son$sheight
g<-ggplot(father.son,aes(x=sheight))
g<-g+geom_histogram(fill="salmon",binwidth=1, aes(y=..density..),colour="black")
g<-g+geom_density(size=2)
g
choose(8,7)*0.5^8+choose(8,8)*0.5^ 8
pbinom(6,size=8,prob=.5,lower.tail=FALSE)
x<-rnorm(1000,0,1)
d<-density(x)
plot(x,d)
plot(d)
x<-rnorm(10000,0,1)
d<-density(x)
plot(d)
x<-rnorm(100000,0,1)
d<-density(x)
plot(d)
x<-rnorm(1000000,0,1)
d<-density(x)
plot(d)
ppois(3,lambda=2.5*4)
pbinorm(2, size=500, prob=0.01)
pbinom(2, size=500, prob=0.01)
ppois(2, lambda=500*0.01)
library(manipulate)
k<-1000
xvals<-seq(-5,5,length=k)
myplot<-function(df){
d<-data.frame(y=c(dnorm(xvals),dt(xvals, df)),
x=xvals,
dist=factor(rep(c("Normal","T"),c(k,k))))
g<-ggplot(d,aes=(x=x,y=y))
g<-g+geom_line(size=2,aes(colour=dist))
g
}
maniplate(myplot(mu),mu=manipulate::slider(1,20,step=1)
myplot<-function(df){
d<-data.frame(y=c(dnorm(xvals),dt(xvals, df)),
x=xvals,
dist=factor(rep(c("Normal","T"),c(k,k))))
g<-ggplot(d,aes=(x=x,y=y))
g<-g+geom_line(size=2,aes(colour=dist))
g
}
maniplate(myplot(mu),mu=manipulate::slider(1,20,step=1)
k<-1000
xvals<-seq(-5,5,length=k)
myplot<-function(df){
d<-data.frame(y=c(dnorm(xvals),dt(xvals, df)),
x=xvals,
dist=factor(rep(c("Normal","T"),c(k,k))))
g<-ggplot(d,aes=(x=x,y=y))
g<-g+geom_line(size=2,aes(colour=dist))
g
}
manipulate(myplot(mu),mu=manipulate::slider(1,20,step=1)
k<-1000
xvals<-seq(-5,5,length=k)
myplot<-function(df){
d<-data.frame(y=c(dnorm(xvals),dt(xvals, df)),
x=xvals,
dist=factor(rep(c("Normal","T"),c(k,k))))
g<-ggplot(d,aes(x=x,y=y))
g<-g+geom_line(size=2,aes(colour=dist))
g
}
manipulate(myplot(mu),mu=manipulate::slider(1,20,step=1)
)
?dt
?rep
k<-1000
xvals<-seq(-5,5,length=k)
myplot<-function(df){
d<-data.frame(y=c(dnorm(xvals),dt(xvals, df)),
x=xvals,
dist=factor(rep(c("Normal","T"))))
g<-ggplot(d,aes(x=x,y=y))
g<-g+geom_line(size=2,aes(colour=dist))
g
}
manipulate(myplot(mu),mu=manipulate::slider(1,20,step=1))
k<-1000
xvals<-seq(-5,5,length=k)
myplot<-function(df){
d<-data.frame(y=c(dnorm(xvals),dt(xvals, df)),
x=xvals,
dist=factor(rep(c("Normal","T"),c(k,k))))
g<-ggplot(d,aes(x=x,y=y))
g<-g+geom_line(size=2,aes(colour=dist))
g
}
manipulate(myplot(mu),mu=manipulate::slider(1,20,step=1))
?factor
pvals<-seq(.5,.99,by=.01)
myplot2<-function(df){
d<-data.frame(n=qnorm(pvals),t=qt(pvals,df),
p=pvals)
g<-ggplot(d,aes(x=n,y=t))
g<-g+geom_abline(size=2,col="lightblue")
g<-g+geom_line(size=2, col="black")
g<-g+geom_vline(xintercept=gnorm(0.975))
g<-g+geom_hline(yintercept=qt(0.975,df))
g
}
manipulate(myplot2(df),df=manipulate::slider(1,20,step=1))
pvals<-seq(.5,.99,by=.01)
myplot2<-function(df){
d<-data.frame(n=qnorm(pvals),t=qt(pvals,df),
p=pvals)
g<-ggplot(d,aes(x=n,y=t))
g<-g+geom_abline(size=2,col="lightblue")
g<-g+geom_line(size=2, col="black")
g<-g+geom_vline(xintercept=qnorm(0.975))
g<-g+geom_hline(yintercept=qt(0.975,df))
g
}
manipulate(myplot2(df),df=manipulate::slider(1,20,step=1))
?abline
data(sleep)
head(sleep)
ggplot(sleep, aes(x=group,y=extra))
g<-ggplot(sleep, aes(x=group, y=extra))
g<-ggplot(sleep, aes(x=group, y=extra))
g<-g+geom_points(size=2)
g
ggplot(sleep, aes(x=group,y=extra))
?geom
??geom_
g<-ggplot(sleep, aes(x=group, y=extra))
g<-g+geom_dotplot(size=2)
g
head(sleep)
sleep
?aggregate
sleep<-aggregate(data=sleep, extra~ID,FUN=sum)
head(sleep)
sleep
library(ggplot2)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
library(ggplot2)
data(sleep)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
md <- mean(g2) - mean(g1)
semd <- sp * sqrt(1 / n1 + 1/n2)
rbind(
md + c(-1, 1) * qt(.975, n1 + n2 - 2) * semd,
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf,
t.test(g2, g1, paired = TRUE)$conf
)
md <- mean(g2) - mean(g1)
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
md <- mean(g2) - mean(g1)
semd <- sp * sqrt(1 / n1 + 1/n2)
rbind(
md + c(-1, 1) * qt(.975, n1 + n2 - 2) * semd,
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf,
t.test(g2, g1, paired = TRUE)$conf
)
library(datasets); data(ChickWeight);
head(ChickWeight)
intall.packages(reshape2)
install.packages(reshape2)
install.packages(reshape)
install.packages(reshapes)
install.packages(reshape2)
install.packages("reshape")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
ls()
library()
library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
head(wideCW)
head(ChickWeight)
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
head(wideCW)
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
library(dplyr)
install.packages("dplyr")
library(reshape2)
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
head(wideCW)
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(aes(group = 1), geom = "line", fun.y = mean, size = 1, col = "black")
g <- g + facet_grid(. ~ Diet)
g
library(ggplot2)
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(aes(group = 1), geom = "line", fun.y = mean, size = 1, col = "black")
g <- g + facet_grid(. ~ Diet)
g
g <- ggplot(wideCW, aes(x = factor(Diet), y = gain, fill = factor(Diet)))
g <- g + geom_violin(col = "black", size = 2)
g
qt(.975,15)
qt(.95,15)
library(UsingR)
data(father.son)
t.test(father.son$sheight-father.son$fheight)
dim(father.son)
qt(.975,1077)
choose(8,7)*0.5^8+choose(8,8)*0.5^ 8
?PPOIS
?ppois
n <- 10000
means <- cumsum(rnorm(n))/(1:n)
library(ggplot2)
g <- ggplot(data.frame(x = 1:n, y = means), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 2)
g <- g + labs(x = "Number of obs", y = "Cumulative mean")
g
means <- cumsum(sample(0:1, n, replace = TRUE))/(1:n)
g <- ggplot(data.frame(x = 1:n, y = means), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0.5) + geom_line(size = 2)
g <- g + labs(x = "Number of obs", y = "Cumulative mean")
g
nosim <- 1000
cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat <- data.frame(
x = c(apply(matrix(sample(1 : 6, nosim * 10, replace = TRUE),
nosim), 1, cfunc, 10),
apply(matrix(sample(1 : 6, nosim * 20, replace = TRUE),
nosim), 1, cfunc, 20),
apply(matrix(sample(1 : 6, nosim * 30, replace = TRUE),
nosim), 1, cfunc, 30)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
?rep
nosim <- 1000
cfunc <- function(x, n) 2 * sqrt(n) * (mean(x) - 0.5)
dat <- data.frame(
x = c(apply(matrix(sample(0:1, nosim * 10, replace = TRUE),
nosim), 1, cfunc, 10),
apply(matrix(sample(0:1, nosim * 20, replace = TRUE),
nosim), 1, cfunc, 20),
apply(matrix(sample(0:1, nosim * 30, replace = TRUE),
nosim), 1, cfunc, 30)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
?apply
binom.test(56,100)
x<-c(0.18,-1.54,0.42,0.95)
w<-c(2,1,3,1)
sum<-sum(x*w)
average<-sum/sum(w)
average
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
beta<-sum(y*x)/sum(x^2)
beta
library(UsingR)
data(mtcars)
head(mtcars)
lm(I(mpg-mean(mpg))~I(wt-mean(wt)),data=mtcars)
setwd("~/Desktop/Machine learning project")
train<-read.csv("pml-training.csv")
dim(train)
names(train)
head(train)
head(train,n=1)
summary(train$classe)
class(train$classe)
test<-read.csv("pml-testing.csv")
dim(test)
library(caret)
tail(train)
test<-read.csv("pml-testing.csv",header = TRUE, sep = ",",na.strings = c("NA", ""))
head(test)
na_test = sapply(train, function(x) {sum(is.na(x))})
table(na_test)
dim(train)
inTrain = createDataPartition(y=train$classe, p=0.7, list=FALSE)
training = train[inTrain,]
testing = train[-inTrain,]
dim(training)
na_test = sapply(training, function(x) {sum(is.na(x))})
table(na_test)
train<-read.csv("pml-training.csv",header = TRUE, sep = ",",na.strings = c("NA", ""))
inTrain = createDataPartition(y=train$classe, p=0.7, list=FALSE)
training = train[inTrain,]
testing = train[-inTrain,]
dim(training)
na_test = sapply(training, function(x) {sum(is.na(x))})
table(na_test)
na_test = sapply(train, function(x) {sum(is.na(x))})
table(na_test)
na_count = sapply(training, sum(is.na(x))
table(na_count)
na_count <- sapply(training, sum(is.na(x))
)
na_count <- sapply(training, function(x) {sum(is.na(x))})
table(na_count)
na_count <- sapply(training, 2,function(x) {sum(is.na(x))})
table(na_count)
?sapply
?apply
nas<-apply(training, 1, sum(is.na))
table(nas)
nas<-apply(training, 1, sum(is.na(x)))
nas<-apply(training, 1, sum)
train<-read.csv("pml-training.csv",header = TRUE, sep = ",",na.strings = c("NA", ""))
dim(train)
head(train,n=3)
tail(train,n=3)
summary(train$classe)
train <- train[, -c(1:7)]
na_count = sapply(train, function(x) {sum(is.na(x))})
table(na_test)
naRatio <- function(x) {
n <- length(x)
nas <- sum(is.na(x))
return( nas/n)
}
variable_naRatio<- apply(train, 2, naRatio)
train <- train[, variable_naRatio <-.1]
dim(train)
train <- train[, variable_naRatio <.1]
dim(train)
variable_naRatio<- apply(train, 2, naRatio)
train <- train[, variable_naRatio <.1]
dim(train)
naRatio <- function(x) {
n <- length(x)
nas <- sum(is.na(x))
return(nas/n)
}
variable_naRatio<- apply(train, 2, naRatio)
train <- train[, variable_naRatio < 0.1]
dim(train)
variable_naRatio<- apply(train, 1, naRatio)
train <- train[, variable_naRatio < 0.1]
dim(train)
variable_naRatio<- apply(train, 2, naRatio)
train <- train[, variable_naRatio < 0.1]
dim(train)
head(train)
naRatio(train[,8])
naRatio(train[,9])
train[2,9]
train<-read.csv("pml-training.csv",header = TRUE, sep = ",",na.strings = c("NA", ""))
train1 <- train[, -c(1:7)]
na_count = sapply(train1, function(x) {sum(is.na(x))})
table(na_test)
naRatio <- function(x) {
n <- length(x)
nas <- sum(is.na(x))
return(nas/n)
}
naRatio(train1[,9])
variable_naRatio<- apply(train1, 2, naRatio)
train2 <- train[, variable_naRatio < 0.1]
dim(train2)
dim(train)
dim(train1)
dim(train2)
na_count = sapply(train1, function(x) {sum(is.na(x))})
table(na_test)
train2 <- train[, variable_naRatio <= 0.1]
dim(train2)
na_count = sapply(train1, function(x) {sum(is.na(x))})
table(na_test)
train2 <- train[, variable_naRatio <= 0.05]
dim(train2)
variable_naRatio<- apply(train1, 2, naRatio)
train2 <- train1[, variable_naRatio <= 0.05]
dim(train2)
variable_naRatio<- sapply(train1, naRatio)
train2 <- train1[, variable_naRatio <= 0.05]
dim(train2)
train1 <- train[, -c(1:7)]
dim(train1)
na_count = sapply(train1, function(x) {sum(is.na(x))})
table(na_test)
head(train1)
na_count <- sapply(train1, function(x) {sum(is.na(x))})
table(na_test)
na_count <- sapply(train1, function(x) {sum(is.na(x))})
table(na_count)
variable_naRatio<- sapply(train1, naRatio)
train2 <- train1[, variable_naRatio < 0.1]
dim(train2)
inTrain = createDataPartition(y=train2$classe, p=0.7, list=FALSE)
training = train2[inTrain,]
testing = train2[-inTrain,]
dim(training)
modFit<-train(classe~., method="rf", data=training)
library(caret)
library(AppliedPredictiveModeling)
modFit<-train(classe~., method="rf", data=training,prox=TRUE)
inTrain = createDataPartition(y=train2$classe, p=0.7, list=FALSE)
training = train2[inTrain,]
testing = train2[-inTrain,]
dim(training)
modFit<-train(classe~., method="rf", data=training, prox=TRUE)
inTrain = createDataPartition(y=train2$classe, p=0.1, list=FALSE)
training = train2[inTrain,]
testing = train2[-inTrain,]
dim(training)
inTrain = createDataPartition(y=train2$classe, p=0.7, list=FALSE)
training = train2[inTrain,]
testing = train2[-inTrain,]
dim(training)
set.seed(1000)
inTrainSub <- createDataPartition(y = training$classe, p = 0.1, list = F)
trainingSub1 <- training[inTrainSub, ]
dim(trainingSub1)
modFit<-train(classe~., method="rf", data=trainingSub1, prox=TRUE)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
set.seed(33833)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
modFit<-train(y~., data=vowel.train, method="rf",prox=TRUE)
modFit<-train(classe~., method="rf", data=trainingSub1, prox=TRUE)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
set.seed(33833)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
modFit<-train(y~., data=vowel.train, method="rf",prox=TRUE)
